<?php

/**
 * @file
 * Contains abs_content_file.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
/*use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;*/
use Drupal\node\NodeInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_help().
 */
function abs_content_file_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the abs_content_file module.
    case 'help.page.abs_content_file':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

function abs_content_file_node_update(NodeInterface $node){//(EntityInterface $entity){


	\Drupal::logger('content_file')->notice('hasField: ' . var_export($node->hasField('field_save_to_file'), true));

	if($node->hasField('field_save_to_file')){
		\Drupal::logger('content_file')->notice(var_export($node->get('field_save_to_file')->getValue(), true));	
	}
	

	//check that it has a field_save_to_file
	//and is checked
	
	if($node->hasField('field_save_to_file') && $node->get('field_save_to_file')->getValue() == true){

		\Drupal::logger('content_file')->notice('hook_node_update: '. var_export($node->getEntityTypeId(), true));

		//render its html
		$nodeTypeId = $node->getEntityTypeId();

		$view_builder = \Drupal::entityManager()->getViewBuilder($nodeTypeId);
 		
/*		$view_modes = Drupal::entityQuery('entity_view_mode')
  			->condition('targetEntityType', 'node')
  			->execute();

  		drupal_set_message('view_modes: ' . var_export($view_modes));*/

/*  		if(array_search('template', $view_modes) !== false){
  			$view_mode = 'template'; //$node->getSetting('view_mode');	
  		} else {
  			$view_mode = 'default';
  		}	*/

  		$view_mode = 'default';

		$build = $view_builder->view($node, $view_mode, $node->language()->getId());

		$rendered = drupal_render($build);

		$rendered = '<template>' . $rendered . '</template>';

		//if the node specifies a filename, use that
		if($node->hasField('field_filename') && $node->get('field_filename')->getValue() != null ){
			$filename = $node->get('field_filename')->getValue();
		} elseif($node->getTitle() != '') {
			$title = $node->getTitle();
			$filename = \Drupal::service('pathauto.alias_cleaner')->cleanString($title);
		} else {
			$filename = $node->id();	
		}

		$destination = file_default_scheme() . '://' . $filename . '.html';
		//save it to a file
		file_save_data($rendered, $destination, FILE_EXISTS_REPLACE);
	}
	
}

//TODO: add predelete hook to warn user before deleting a node that generated a file
//
//